<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 		<!-- Mybatis 설정 -->
	 <!--    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <beans:property name="url" value="jdbc:mysql://127.0.0.1:3306/4jobdb?useUnicode=true&amp;characterEncoding=euckr"/>
        <beans:property name="username" value="4job"/>
        <beans:property name="password" value="job4"/>
    </beans:bean>
    mybatis 세션생성을 위한 팩토리 생성
    <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        mybatis 세션생성시 사용할 dataSource주입
        <beans:property name="dataSource" ref="dataSource" />
        mybatis 세션생성후 쿼리를 실행시킬때 사용할 쿼리위치(메퍼)설정
        <beans:property name="mapperLocations">
            <beans:list>
                <beans:value>classpath:www/naver/com/service/Mapper.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    mybatis를 사용하여 db에접속하여 쿼리를 보내는 주체인 SqlSessionTemplate빈 생성
    <beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <beans:constructor-arg index="0" ref="sqlSessionFactory" />
    </beans:bean> -->




	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" /> 
	<resources mapping="/images/**" location="/resources/images/" /> 
	<resources mapping="/js/**" location="/resources/js/" /> 
	<resources mapping="/resources/**" location="/resources/" /> 
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 로그인 인터셉터 테스트 -->
		<interceptors>
		<interceptor>
			<mapping path="/logout"/>
			<mapping path="/home"/>
			<beans:bean class="www.naver.com.Interceptor.test"></beans:bean>
		</interceptor>
		</interceptors>
	
	
	<!-- 로그아웃 인터셉터(캐쉬날리기) -->
	<interceptors>
	<beans:bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
	        <beans:property name="cacheSeconds" value="0" />
	        <beans:property name="useExpiresHeader" value="true" />
	        <beans:property name="useCacheControlHeader" value="true" />
	        <beans:property name="useCacheControlNoStore" value="true" />
		<!--           예외처리 하여 캐쉬 적용이 가능 하다.
		     <property name="cacheMappings">
		                   <props>
		                      <prop key="/test/test/**">86400</prop>
		                   </props>
		      </property>
		--> 
    	</beans:bean>
		</interceptors>


	
	
	
	<context:component-scan base-package="www.naver.com" />
	
	
	
</beans:beans>
